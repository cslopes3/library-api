generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     String @default("user")

  reservations Reservation[]
  schedules    Schedule[]

  @@map("users")
}

model Book {
  id                 String    @id @default(uuid())
  name               String
  editionNumber      Int       @map("edition_number")
  editionDescription String    @map("edition_description")
  editionYear        Int       @map("edition_year")
  quantity           Int
  pages              Int
  available          Int
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  publisherId        String    @map("publisher_id")

  publisher        Publisher         @relation(fields: [publisherId], references: [id])
  authors          BookAuthors[]
  reservationItems ReservationItem[]
  scheduleItems    ScheduleItem[]

  @@map("books")
}

model Author {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  books BookAuthors[]

  @@map("authors")
}

model BookAuthors {
  bookId   String @map("book_id")
  authorId String @map("author_id")

  book   Book   @relation(fields: [bookId], references: [id])
  author Author @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
  @@map("book_authors")
}

model Publisher {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  books Book[]

  @@map("publishers")
}

model Reservation {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  reservationItems ReservationItem[]

  @@map("reservations")
}

model ReservationItem {
  id                String    @id @default(uuid())
  reservationId     String    @map("reservation_id")
  bookId            String    @map("book_id")
  name              String
  expirationDate    DateTime  @map("expiration_date")
  alreadyExtendTime Boolean   @map("already_extend_time")
  returned          Boolean
  returnDate        DateTime? @map("return_date")

  book        Book        @relation(fields: [bookId], references: [id])
  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@map("reservation_items")
}

model Schedule {
  id        String    @id @default(uuid())
  date      DateTime
  userId    String    @map("user_id")
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user          User           @relation(fields: [userId], references: [id])
  scheduleItems ScheduleItem[]

  @@map("schedules")
}

model ScheduleItem {
  id         String @id @default(uuid())
  scheduleId String @map("schedule_id")
  bookId     String @map("book_id")
  name       String

  book     Book     @relation(fields: [bookId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  @@map("schedule_items")
}
